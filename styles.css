/*El selector global aplica una configuración a nivel general, en esta opción, la propiedad box-sizing con el valor content-box, permite que cuando un elemento tenga un ancho específico, esa anchura se calcula únicamente basándose en el contenido del elemento, los valores de relleno y borde se añaden al ancho total, entonces, el elemento crece para acoplarse a estos valores*/

/*El valor border-box por el contrario hace que el ancho total del elemento, incluido el relleno y el borde sea el ancho establecido explícitamente, entonces, el contenido del elemento se reducirá para hacer espacio para el relleno y el borde.*/
* {
    box-sizing: border-box;
  }

/*.gallery {
    width: 50%;
    border: 5px solid red; Con este codigo y el de abajo se muestran bordes para entender la teoría
}

img {
    width: 100%;
    padding: 5px;
    border: 5px solid blue;
}
*/

.header {
    padding: 32px;
    color: #fff;
    background-color: #0a0a23;
    text-align: center; /*Se centra el texto*/
    text-transform: uppercase; /*Se cambia a mayúsculas*/
    border-bottom: 4px solid #fdb347;
}

body {
    margin: 0;
    font-family: sans-serif; /*Se elimina margen del body*/
    background-color: #f5f6f7;
}

.gallery img {
    width: 100%;
    height: 300px;
    max-width: 350px; /*Hasta aquí las imagenes se adaptan*/
    object-fit: cover;
    border-radius: 10px;
}

/*Flexbox es un diseño CSS unidimensional que puede controlar la forma en que los elementos se espacian y alinean dentro de un contenedor.

Para utilizarlo, dale a un elemento una propiedad display con el valor flex. Esto hará que el elemento sea un flex container (contenedor flexible). Todos los hijos directos de un contenedor flex se llaman flex items (elementos flex).*/

.gallery {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
    padding: 20px 10px;
    max-width: 1400px;
    margin: 0 auto;
    gap: 16px;
}

/*Flexbox tiene un eje principal y otro transversal. El eje principal está definido por la propiedad flex-direction, que tiene cuatro valores posibles:

row (por defecto): eje horizontal con elementos flex de izquierda a derecha
row-reverse: eje horizontal con elementos flex de derecha a izquierda
column: eje vertical con elementos flexibles de arriba a abajo
column-reverse: eje vertical con elementos flexibles de abajo a arriba
Nota: Los ejes y direcciones serán diferentes dependiendo de la dirección del texto. Los valores mostrados son para una dirección de texto de izquierda a derecha.

La propiedad flex-wrap determina como se comportan tus elementos flex cuando el contenedor flex es demasiado pequeño. Si se establece como wrap, los elementos se colocan en la siguiente fila o columna. nowrap (por defecto) evitará que los elementos se coloquen en varias líneas y los encogerá si es necesario.

La propiedad justify-content determina cómo se posicionan los elementos dentro de un contenedor flex a lo largo del eje principal, afectando a su posición y al espacio que los rodea.

La propiedad align-items posiciona el contenido flex a lo largo del eje transversal. En este caso, con tu flex-direction establecido en row, el eje transversal sería vertical.

Observe como algunas de sus imágenes se han distorsionado. Esto se debe a que las imágenes tienen diferentes relaciones de aspecto. En lugar de establecer cada relación de aspecto individualmente, puedes utilizar la propiedad object-fit para determinar como deben comportarse las imágenes.
Dale a tu selector .gallery img la propiedad object-fit establecida en cover. Esto le dirá a la imagen que llene el contenedor img mientras mantiene la relación de aspecto, lo que resulta en un recorte para ajustarse.

Tus imágenes necesitan algo de espacio entre ellas.

La propiedad abreviada CSS gap especifica los espacios, también conocidos como canales, entre filas y columnas. La propiedad gap y sus subpropiedades row-gap y column-gap proporcionan esta funcionalidad para los diseños flex, grid, y multicolumna. La propiedad se aplica al elemento contenedor.

El pseudo-elemento ::after crea un elemento que es el último hijo del elemento seleccionado. Puedes hacer uso de él para añadir un elemento vacío a continuación de la ultima imagen. Si en su propiedad width se le asigna el mismo valor que tiene en las imágenes, empujará la última imagen hacia la izquierda cuando la galería tenga un diseño de dos columnas. En este momento, está en el centro porque se ha establecido justify-content: center en el contenedor flex.
*/

/*Este código empujara una imagen a la siguiente línea cuando hayan dos columnas de fotos*/
.gallery::after {
    content: "";
    width: 350px;
  }
